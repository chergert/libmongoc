#include "mongoc-opts-private.h"
#include "mongoc-error.h"

{{ header_comment }}

{% for struct_type, description in opts_structs.items() %}
{% if description.is_base %}{% continue %}{% endif %}
{% set struct_name = struct_type.split('_t', -1)[0] %}
bool
parse_{{ struct_name }} (
   const bson_t *opts,
   {{ struct_type }} *{{ struct_name }},
   bson_t *extra,
   bson_error_t *error)
{
   bson_iter_t iter;

   if (!bson_iter_init (&iter, opts)) {
      bson_set_error (error,
                      MONGOC_ERROR_BSON,
                      MONGOC_ERROR_BSON_INVALID,
                      "Invalid 'opts' parameter.");
      return false;
   }

   while (bson_iter_next (&iter)) {
{% for path, opt_name, info in paths(description) %}
{% if info['type'] == 'utf8' %}
{% set the_type = 'const char *' %}
{% elif info['type'] == 'document' %}
{% set the_type = 'bson_t' %}
{% else %}
{% set the_type = info['type'] %}
{% endif %}
{% set the_name = info.get('field', opt_name) %}
{% set the_converter = info.get('convert', '_mongoc_convert_' + info['type'] ) %}
      {% if loop.index > 1 %}else {% endif %}if (!strcmp (bson_iter_key (&iter), "{{ opt_name }}")) {
         if (!{{ the_converter }} (
               &iter, &{{ struct_name }}->{{ path }}, error)) {
            return false;
         }
      }
{% endfor %}
      else {
         /* unrecognized values are copied to "extra" */
         if (!bson_append_value (
                extra, bson_iter_key (&iter), -1, bson_iter_value (&iter))) {
            bson_set_error (error,
                            MONGOC_ERROR_BSON,
                            MONGOC_ERROR_BSON_INVALID,
                            "Invalid 'opts' parameter.");
            return false;
         }
      }
   }

   return true;
}


{% endfor %}
